name: Deploy and Test

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
    - name: Copy deployment script to server
      run: |
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i ~/.ssh/id_ed25519 \
          scripts/deploy-with-https.sh \
          ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/root/deploy-websocket-relay.sh

    - name: Deploy to server
      id: deploy
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          -i ~/.ssh/id_ed25519 \
          ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
          "chmod +x /root/deploy-websocket-relay.sh && DOMAIN='${{ secrets.DOMAIN }}' /root/deploy-websocket-relay.sh"
        
    - name: Test health endpoint from GitHub
      id: health_check
      run: |
        echo "Waiting for service to stabilize..."
        sleep 5
        
        echo "Testing health endpoint..."
        # Try domain first if available, then IP
        if [ -n "${{ secrets.DOMAIN }}" ]; then
          RESPONSE=$(curl -s https://${{ secrets.DOMAIN }}/health || curl -k -s https://${{ secrets.SERVER_IP }}/health)
        else
          RESPONSE=$(curl -k -s https://${{ secrets.SERVER_IP }}/health)
        fi
        echo "Health response: $RESPONSE"
        
        # Parse JSON response
        STATUS=$(echo $RESPONSE | jq -r '.status' || echo "unknown")
        VERSION=$(echo $RESPONSE | jq -r '.version' || echo "unknown")
        COMMIT=$(echo $RESPONSE | jq -r '.commit_hash' || echo "unknown")
        
        if [ "$STATUS" = "healthy" ]; then
          echo "✅ Service is healthy!"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT
        else
          echo "❌ Service health check failed!"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Run functional tests
      id: functional_tests
      run: |
        echo "Installing Go on runner..."
        
        echo "Running functional tests..."
        cd test
        if [ -n "${{ secrets.DOMAIN }}" ]; then
          SERVER_URL="https://${{ secrets.DOMAIN }}" go run functional.go
        else
          SERVER_URL="https://${{ secrets.SERVER_IP }}" SKIP_TLS_VERIFY=true go run functional.go
        fi
        cd ..
        echo "functional_test_status=passed" >> $GITHUB_OUTPUT

    - name: Run benchmark
      id: benchmark
      run: |
        echo "Running 5-second transport benchmark..."
        cd test
        if [ -n "${{ secrets.DOMAIN }}" ]; then
          go run benchmark-transport.go \
            -server "https://${{ secrets.DOMAIN }}" \
            -clients 50 \
            -duration 5s \
            -transport both \
            -output "../benchmark-results.json"
        else
          SERVER_URL="https://${{ secrets.SERVER_IP }}" \
          SKIP_TLS_VERIFY=true \
          go run benchmark-transport.go \
            -server "https://${{ secrets.SERVER_IP }}" \
            -clients 50 \
            -duration 5s \
            -transport both \
            -output "../benchmark-results.json"
        fi
        cd ..
        
        # Read benchmark results
        BENCHMARK_DATA=$(cat benchmark-results.json)
        echo "benchmark_data<<EOF" >> $GITHUB_OUTPUT
        echo "$BENCHMARK_DATA" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create deployment report
      if: always()
      run: |
        COMMIT_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
        
        # Escape commit message for JSON
        ESCAPED_MSG=$(echo "${{ github.event.head_commit.message }}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/\r/\\r/g' | sed 's/\t/\\t/g')
        
        # Create deployment report
        cat > deployment-report.json << EOF
        {
          "deployment_status": "${{ steps.deploy.outcome }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "commit_short": "$COMMIT_SHORT",
          "commit_message": "$ESCAPED_MSG",
          "service_version": "${{ steps.health_check.outputs.version }}",
          "health_status": "${{ steps.health_check.outputs.status }}",
          "health_response": ${{ steps.health_check.outputs.response || 'null' }},
          "functional_test_status": "${{ steps.functional_tests.outputs.functional_test_status }}",
          "benchmark_results": ${{ steps.benchmark.outputs.benchmark_data || 'null' }},
          "github_run_id": "${{ github.run_id }}",
          "github_run_number": "${{ github.run_number }}",
          "repository": "${{ github.repository }}"
        }
        EOF

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.json
        
  update-status-page:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download deployment report
      uses: actions/download-artifact@v4
      with:
        name: deployment-report
        
    - name: Update benchmark history
      run: |
        # Create benchmarks directory if it doesn't exist
        mkdir -p benchmarks
        
        # Read current deployment report
        CURRENT_REPORT=$(cat deployment-report.json)
        
        # Initialize history file if it doesn't exist
        if [ ! -f benchmarks/history.json ]; then
          echo "[]" > benchmarks/history.json
        fi
        
        # Add current report to history (prepend for newest first)
        jq ". = [$CURRENT_REPORT] + ." benchmarks/history.json > benchmarks/history.tmp
        
        # Keep only last 50 entries to avoid file getting too large
        jq '.[0:50]' benchmarks/history.tmp > benchmarks/history.json
        rm benchmarks/history.tmp
        
        # Commit the updated history back to repo
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add benchmarks/history.json
        git diff --staged --quiet || git commit -m "Update benchmark history [skip ci]"
        git push origin main || true
        
    - name: Create status page
      run: |
        # Read deployment report and history
        DEPLOYMENT_DATA=$(cat deployment-report.json 2>/dev/null || echo '{"deployment_status":"unknown"}')
        HISTORY_DATA=$(cat benchmarks/history.json 2>/dev/null || echo '[]')
        STATUS=$(echo "$DEPLOYMENT_DATA" | jq -r '.deployment_status')
        
        # Copy comprehensive dashboard template
        cp ${{ github.workspace }}/.github/workflows/comprehensive-dashboard.html index.html
        
        # Replace placeholders with actual data
        # Write JSON to files to avoid escaping issues
        echo "$DEPLOYMENT_DATA" > deployment.json
        echo "$HISTORY_DATA" > history.json
        
        # Use Python to safely replace the placeholders
        python3 << 'PYTHON'
        import json
        
        # Read the deployment data
        with open('deployment.json', 'r') as f:
            deployment_data = f.read().strip()
        
        # Read the history data
        with open('history.json', 'r') as f:
            history_data = f.read().strip()
        
        # Read the HTML template
        with open('index.html', 'r') as f:
            html = f.read()
        
        # Replace placeholders
        html = html.replace('DEPLOYMENT_DATA_PLACEHOLDER', deployment_data)
        html = html.replace('HISTORY_DATA_PLACEHOLDER', history_data)
        
        # Use domain if available, otherwise use IP with HTTPS
        domain = '${{ secrets.DOMAIN }}'
        if domain and domain != '':
            service_url = f'https://{domain}'
        else:
            service_url = 'https://${{ secrets.SERVER_IP }}'
        
        html = html.replace('SERVICE_URL_PLACEHOLDER', service_url)
        html = html.replace('SERVER_IP_PLACEHOLDER', '${{ secrets.SERVER_IP }}')
        html = html.replace('GITHUB_REPOSITORY_PLACEHOLDER', '${{ github.repository }}')
        
        # Make sure to replace all occurrences of SERVICE_URL_PLACEHOLDER in JavaScript too
        html = html.replace("'SERVICE_URL_PLACEHOLDER", f"'{service_url}")
        
        # Write the final HTML
        with open('index.html', 'w') as f:
            f.write(html)
        PYTHON
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4